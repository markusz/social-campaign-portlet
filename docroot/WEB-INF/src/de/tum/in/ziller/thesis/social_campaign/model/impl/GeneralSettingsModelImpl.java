/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.tum.in.ziller.thesis.social_campaign.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.tum.in.ziller.thesis.social_campaign.model.GeneralSettings;
import de.tum.in.ziller.thesis.social_campaign.model.GeneralSettingsModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the GeneralSettings service. Represents a row in the &quot;zsc_GeneralSettings&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.tum.in.ziller.thesis.social_campaign.model.GeneralSettingsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeneralSettingsImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a general settings model instance should use the {@link de.tum.in.ziller.thesis.social_campaign.model.GeneralSettings} interface instead.
 * </p>
 *
 * @author Markus Ziller
 * @see GeneralSettingsImpl
 * @see de.tum.in.ziller.thesis.social_campaign.model.GeneralSettings
 * @see de.tum.in.ziller.thesis.social_campaign.model.GeneralSettingsModel
 * @generated
 */
public class GeneralSettingsModelImpl extends BaseModelImpl<GeneralSettings>
	implements GeneralSettingsModel {
	public static final String TABLE_NAME = "zsc_GeneralSettings";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userProfileId", new Integer(Types.BIGINT) },
			{ "displayName", new Integer(Types.VARCHAR) },
			{ "inofficialEventsSearchRadius", new Integer(Types.INTEGER) },
			{ "homebase", new Integer(Types.VARCHAR) },
			{ "homebaseLatitude", new Integer(Types.DOUBLE) },
			{ "homebaseLongitude", new Integer(Types.DOUBLE) }
		};
	public static final String TABLE_SQL_CREATE = "create table zsc_GeneralSettings (userProfileId LONG not null primary key,displayName VARCHAR(75) null,inofficialEventsSearchRadius INTEGER,homebase VARCHAR(500) null,homebaseLatitude DOUBLE,homebaseLongitude DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table zsc_GeneralSettings";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.GeneralSettings"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.GeneralSettings"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.tum.in.ziller.thesis.social_campaign.model.GeneralSettings"));

	public GeneralSettingsModelImpl() {
	}

	public long getPrimaryKey() {
		return _userProfileId;
	}

	public void setPrimaryKey(long pk) {
		setUserProfileId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_userProfileId);
	}

	public long getUserProfileId() {
		return _userProfileId;
	}

	public void setUserProfileId(long userProfileId) {
		_userProfileId = userProfileId;
	}

	public String getDisplayName() {
		if (_displayName == null) {
			return StringPool.BLANK;
		}
		else {
			return _displayName;
		}
	}

	public void setDisplayName(String displayName) {
		_displayName = displayName;
	}

	public int getInofficialEventsSearchRadius() {
		return _inofficialEventsSearchRadius;
	}

	public void setInofficialEventsSearchRadius(
		int inofficialEventsSearchRadius) {
		_inofficialEventsSearchRadius = inofficialEventsSearchRadius;
	}

	public String getHomebase() {
		if (_homebase == null) {
			return StringPool.BLANK;
		}
		else {
			return _homebase;
		}
	}

	public void setHomebase(String homebase) {
		_homebase = homebase;
	}

	public double getHomebaseLatitude() {
		return _homebaseLatitude;
	}

	public void setHomebaseLatitude(double homebaseLatitude) {
		_homebaseLatitude = homebaseLatitude;
	}

	public double getHomebaseLongitude() {
		return _homebaseLongitude;
	}

	public void setHomebaseLongitude(double homebaseLongitude) {
		_homebaseLongitude = homebaseLongitude;
	}

	public GeneralSettings toEscapedModel() {
		if (isEscapedModel()) {
			return (GeneralSettings)this;
		}
		else {
			return (GeneralSettings)Proxy.newProxyInstance(GeneralSettings.class.getClassLoader(),
				new Class[] { GeneralSettings.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					GeneralSettings.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		GeneralSettingsImpl clone = new GeneralSettingsImpl();

		clone.setUserProfileId(getUserProfileId());
		clone.setDisplayName(getDisplayName());
		clone.setInofficialEventsSearchRadius(getInofficialEventsSearchRadius());
		clone.setHomebase(getHomebase());
		clone.setHomebaseLatitude(getHomebaseLatitude());
		clone.setHomebaseLongitude(getHomebaseLongitude());

		return clone;
	}

	public int compareTo(GeneralSettings generalSettings) {
		long pk = generalSettings.getPrimaryKey();

		if (getPrimaryKey() < pk) {
			return -1;
		}
		else if (getPrimaryKey() > pk) {
			return 1;
		}
		else {
			return 0;
		}
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		GeneralSettings generalSettings = null;

		try {
			generalSettings = (GeneralSettings)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = generalSettings.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{userProfileId=");
		sb.append(getUserProfileId());
		sb.append(", displayName=");
		sb.append(getDisplayName());
		sb.append(", inofficialEventsSearchRadius=");
		sb.append(getInofficialEventsSearchRadius());
		sb.append(", homebase=");
		sb.append(getHomebase());
		sb.append(", homebaseLatitude=");
		sb.append(getHomebaseLatitude());
		sb.append(", homebaseLongitude=");
		sb.append(getHomebaseLongitude());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append(
			"de.tum.in.ziller.thesis.social_campaign.model.GeneralSettings");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userProfileId</column-name><column-value><![CDATA[");
		sb.append(getUserProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayName</column-name><column-value><![CDATA[");
		sb.append(getDisplayName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inofficialEventsSearchRadius</column-name><column-value><![CDATA[");
		sb.append(getInofficialEventsSearchRadius());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homebase</column-name><column-value><![CDATA[");
		sb.append(getHomebase());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homebaseLatitude</column-name><column-value><![CDATA[");
		sb.append(getHomebaseLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homebaseLongitude</column-name><column-value><![CDATA[");
		sb.append(getHomebaseLongitude());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _userProfileId;
	private String _displayName;
	private int _inofficialEventsSearchRadius;
	private String _homebase;
	private double _homebaseLatitude;
	private double _homebaseLongitude;
	private transient ExpandoBridge _expandoBridge;
}