/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.tum.in.ziller.thesis.social_campaign.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.impl.BaseModelImpl;

import de.tum.in.ziller.thesis.social_campaign.model.EventCreator;
import de.tum.in.ziller.thesis.social_campaign.model.EventCreatorModel;
import de.tum.in.ziller.thesis.social_campaign.service.persistence.EventCreatorPK;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the EventCreator service. Represents a row in the &quot;zsc_EventCreator&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.tum.in.ziller.thesis.social_campaign.model.EventCreatorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventCreatorImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Event Creator model instance should use the {@link de.tum.in.ziller.thesis.social_campaign.model.EventCreator} interface instead.
 * </p>
 *
 * @author Markus Ziller
 * @see EventCreatorImpl
 * @see de.tum.in.ziller.thesis.social_campaign.model.EventCreator
 * @see de.tum.in.ziller.thesis.social_campaign.model.EventCreatorModel
 * @generated
 */
public class EventCreatorModelImpl extends BaseModelImpl<EventCreator>
	implements EventCreatorModel {
	public static final String TABLE_NAME = "zsc_EventCreator";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventId", new Integer(Types.BIGINT) },
			{ "userProfileId", new Integer(Types.BIGINT) }
		};
	public static final String TABLE_SQL_CREATE = "create table zsc_EventCreator (eventId LONG not null,userProfileId LONG not null,primary key (eventId, userProfileId))";
	public static final String TABLE_SQL_DROP = "drop table zsc_EventCreator";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.EventCreator"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.EventCreator"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.tum.in.ziller.thesis.social_campaign.model.EventCreator"));

	public EventCreatorModelImpl() {
	}

	public EventCreatorPK getPrimaryKey() {
		return new EventCreatorPK(_eventId, _userProfileId);
	}

	public void setPrimaryKey(EventCreatorPK pk) {
		setEventId(pk.eventId);
		setUserProfileId(pk.userProfileId);
	}

	public Serializable getPrimaryKeyObj() {
		return new EventCreatorPK(_eventId, _userProfileId);
	}

	public long getEventId() {
		return _eventId;
	}

	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	public long getUserProfileId() {
		return _userProfileId;
	}

	public void setUserProfileId(long userProfileId) {
		_userProfileId = userProfileId;
	}

	public EventCreator toEscapedModel() {
		if (isEscapedModel()) {
			return (EventCreator)this;
		}
		else {
			return (EventCreator)Proxy.newProxyInstance(EventCreator.class.getClassLoader(),
				new Class[] { EventCreator.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public Object clone() {
		EventCreatorImpl clone = new EventCreatorImpl();

		clone.setEventId(getEventId());
		clone.setUserProfileId(getUserProfileId());

		return clone;
	}

	public int compareTo(EventCreator eventCreator) {
		EventCreatorPK pk = eventCreator.getPrimaryKey();

		return getPrimaryKey().compareTo(pk);
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		EventCreator eventCreator = null;

		try {
			eventCreator = (EventCreator)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		EventCreatorPK pk = eventCreator.getPrimaryKey();

		if (getPrimaryKey().equals(pk)) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{eventId=");
		sb.append(getEventId());
		sb.append(", userProfileId=");
		sb.append(getUserProfileId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("de.tum.in.ziller.thesis.social_campaign.model.EventCreator");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userProfileId</column-name><column-value><![CDATA[");
		sb.append(getUserProfileId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _eventId;
	private long _userProfileId;
}