/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.tum.in.ziller.thesis.social_campaign.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import de.tum.in.ziller.thesis.social_campaign.model.EventAssistence;
import de.tum.in.ziller.thesis.social_campaign.model.EventAssistenceModel;
import de.tum.in.ziller.thesis.social_campaign.service.persistence.EventAssistencePK;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the EventAssistence service. Represents a row in the &quot;zsc_EventAssistence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.tum.in.ziller.thesis.social_campaign.model.EventAssistenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventAssistenceImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a event assistence model instance should use the {@link de.tum.in.ziller.thesis.social_campaign.model.EventAssistence} interface instead.
 * </p>
 *
 * @author Markus Ziller
 * @see EventAssistenceImpl
 * @see de.tum.in.ziller.thesis.social_campaign.model.EventAssistence
 * @see de.tum.in.ziller.thesis.social_campaign.model.EventAssistenceModel
 * @generated
 */
public class EventAssistenceModelImpl extends BaseModelImpl<EventAssistence>
	implements EventAssistenceModel {
	public static final String TABLE_NAME = "zsc_EventAssistence";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventId", new Integer(Types.BIGINT) },
			{ "roleId", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) }
		};
	public static final String TABLE_SQL_CREATE = "create table zsc_EventAssistence (eventId LONG not null,roleId LONG not null,userId LONG not null,primary key (eventId, roleId, userId))";
	public static final String TABLE_SQL_DROP = "drop table zsc_EventAssistence";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.EventAssistence"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.EventAssistence"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.tum.in.ziller.thesis.social_campaign.model.EventAssistence"));

	public EventAssistenceModelImpl() {
	}

	public EventAssistencePK getPrimaryKey() {
		return new EventAssistencePK(_eventId, _roleId, _userId);
	}

	public void setPrimaryKey(EventAssistencePK pk) {
		setEventId(pk.eventId);
		setRoleId(pk.roleId);
		setUserId(pk.userId);
	}

	public Serializable getPrimaryKeyObj() {
		return new EventAssistencePK(_eventId, _roleId, _userId);
	}

	public long getEventId() {
		return _eventId;
	}

	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	public long getRoleId() {
		return _roleId;
	}

	public void setRoleId(long roleId) {
		_roleId = roleId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public EventAssistence toEscapedModel() {
		if (isEscapedModel()) {
			return (EventAssistence)this;
		}
		else {
			return (EventAssistence)Proxy.newProxyInstance(EventAssistence.class.getClassLoader(),
				new Class[] { EventAssistence.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public Object clone() {
		EventAssistenceImpl clone = new EventAssistenceImpl();

		clone.setEventId(getEventId());
		clone.setRoleId(getRoleId());
		clone.setUserId(getUserId());

		return clone;
	}

	public int compareTo(EventAssistence eventAssistence) {
		EventAssistencePK pk = eventAssistence.getPrimaryKey();

		return getPrimaryKey().compareTo(pk);
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		EventAssistence eventAssistence = null;

		try {
			eventAssistence = (EventAssistence)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		EventAssistencePK pk = eventAssistence.getPrimaryKey();

		if (getPrimaryKey().equals(pk)) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{eventId=");
		sb.append(getEventId());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append(
			"de.tum.in.ziller.thesis.social_campaign.model.EventAssistence");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _eventId;
	private long _roleId;
	private long _userId;
	private String _userUuid;
}