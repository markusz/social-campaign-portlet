/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.tum.in.ziller.thesis.social_campaign.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.tum.in.ziller.thesis.social_campaign.model.Donation;
import de.tum.in.ziller.thesis.social_campaign.model.DonationModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Donation service. Represents a row in the &quot;zsc_Donation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.tum.in.ziller.thesis.social_campaign.model.DonationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DonationImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a donation model instance should use the {@link de.tum.in.ziller.thesis.social_campaign.model.Donation} interface instead.
 * </p>
 *
 * @author Markus Ziller
 * @see DonationImpl
 * @see de.tum.in.ziller.thesis.social_campaign.model.Donation
 * @see de.tum.in.ziller.thesis.social_campaign.model.DonationModel
 * @generated
 */
public class DonationModelImpl extends BaseModelImpl<Donation>
	implements DonationModel {
	public static final String TABLE_NAME = "zsc_Donation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "donationId", new Integer(Types.BIGINT) },
			{ "amount", new Integer(Types.DOUBLE) },
			{ "donationDate", new Integer(Types.TIMESTAMP) },
			{ "donatorId", new Integer(Types.BIGINT) }
		};
	public static final String TABLE_SQL_CREATE = "create table zsc_Donation (donationId LONG not null primary key,amount DOUBLE,donationDate DATE null,donatorId LONG)";
	public static final String TABLE_SQL_DROP = "drop table zsc_Donation";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.Donation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.Donation"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.tum.in.ziller.thesis.social_campaign.model.Donation"));

	public DonationModelImpl() {
	}

	public long getPrimaryKey() {
		return _donationId;
	}

	public void setPrimaryKey(long pk) {
		setDonationId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_donationId);
	}

	public long getDonationId() {
		return _donationId;
	}

	public void setDonationId(long donationId) {
		_donationId = donationId;
	}

	public double getDonationAmount() {
		return _donationAmount;
	}

	public void setDonationAmount(double donationAmount) {
		_donationAmount = donationAmount;
	}

	public Date getDonationDate() {
		return _donationDate;
	}

	public void setDonationDate(Date donationDate) {
		_donationDate = donationDate;
	}

	public long getDonatorId() {
		return _donatorId;
	}

	public void setDonatorId(long donatorId) {
		_donatorId = donatorId;
	}

	public Donation toEscapedModel() {
		if (isEscapedModel()) {
			return (Donation)this;
		}
		else {
			return (Donation)Proxy.newProxyInstance(Donation.class.getClassLoader(),
				new Class[] { Donation.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Donation.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		DonationImpl clone = new DonationImpl();

		clone.setDonationId(getDonationId());
		clone.setDonationAmount(getDonationAmount());
		clone.setDonationDate(getDonationDate());
		clone.setDonatorId(getDonatorId());

		return clone;
	}

	public int compareTo(Donation donation) {
		long pk = donation.getPrimaryKey();

		if (getPrimaryKey() < pk) {
			return -1;
		}
		else if (getPrimaryKey() > pk) {
			return 1;
		}
		else {
			return 0;
		}
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Donation donation = null;

		try {
			donation = (Donation)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = donation.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{donationId=");
		sb.append(getDonationId());
		sb.append(", donationAmount=");
		sb.append(getDonationAmount());
		sb.append(", donationDate=");
		sb.append(getDonationDate());
		sb.append(", donatorId=");
		sb.append(getDonatorId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("de.tum.in.ziller.thesis.social_campaign.model.Donation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>donationId</column-name><column-value><![CDATA[");
		sb.append(getDonationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>donationAmount</column-name><column-value><![CDATA[");
		sb.append(getDonationAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>donationDate</column-name><column-value><![CDATA[");
		sb.append(getDonationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>donatorId</column-name><column-value><![CDATA[");
		sb.append(getDonatorId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _donationId;
	private double _donationAmount;
	private Date _donationDate;
	private long _donatorId;
	private transient ExpandoBridge _expandoBridge;
}