/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.tum.in.ziller.thesis.social_campaign.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.tum.in.ziller.thesis.social_campaign.model.Event;
import de.tum.in.ziller.thesis.social_campaign.model.EventModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Event service. Represents a row in the &quot;zsc_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.tum.in.ziller.thesis.social_campaign.model.EventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Event model instance should use the {@link de.tum.in.ziller.thesis.social_campaign.model.Event} interface instead.
 * </p>
 *
 * @author Markus Ziller
 * @see EventImpl
 * @see de.tum.in.ziller.thesis.social_campaign.model.Event
 * @see de.tum.in.ziller.thesis.social_campaign.model.EventModel
 * @generated
 */
public class EventModelImpl extends BaseModelImpl<Event> implements EventModel {
	public static final String TABLE_NAME = "zsc_Event";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventId", new Integer(Types.BIGINT) },
			{ "facebookEventId", new Integer(Types.VARCHAR) },
			{ "correspondingGoogleEventId", new Integer(Types.VARCHAR) },
			{ "correspondingGoogleEventCalendarId", new Integer(Types.VARCHAR) },
			{ "title", new Integer(Types.VARCHAR) },
			{ "description", new Integer(Types.VARCHAR) },
			{ "start", new Integer(Types.TIMESTAMP) },
			{ "end", new Integer(Types.TIMESTAMP) },
			{ "location", new Integer(Types.VARCHAR) },
			{ "locationLatitude", new Integer(Types.DOUBLE) },
			{ "locationLongitude", new Integer(Types.DOUBLE) },
			{ "registeredCount", new Integer(Types.BIGINT) },
			{ "creatorId", new Integer(Types.BIGINT) },
			{ "categoryId", new Integer(Types.BIGINT) },
			{ "isOfficial", new Integer(Types.BOOLEAN) }
		};
	public static final String TABLE_SQL_CREATE = "create table zsc_Event (eventId LONG not null primary key,facebookEventId VARCHAR(75) null,correspondingGoogleEventId VARCHAR(75) null,correspondingGoogleEventCalendarId VARCHAR(75) null,title VARCHAR(75) null,description VARCHAR(2000) null,start DATE null,end DATE null,location VARCHAR(400) null,locationLatitude DOUBLE,locationLongitude DOUBLE,registeredCount LONG,creatorId LONG,categoryId LONG,isOfficial BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table zsc_Event";
	public static final String ORDER_BY_JPQL = " ORDER BY event.startingTime ASC, event.title ASC";
	public static final String ORDER_BY_SQL = " ORDER BY zsc_Event.start ASC, zsc_Event.title ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.Event"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.tum.in.ziller.thesis.social_campaign.model.Event"),
			false);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.tum.in.ziller.thesis.social_campaign.model.Event"));

	public EventModelImpl() {
	}

	public long getPrimaryKey() {
		return _eventId;
	}

	public void setPrimaryKey(long pk) {
		setEventId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_eventId);
	}

	public long getEventId() {
		return _eventId;
	}

	public void setEventId(long eventId) {
		_eventId = eventId;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = eventId;
		}
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	public String getFacebookEventId() {
		if (_facebookEventId == null) {
			return StringPool.BLANK;
		}
		else {
			return _facebookEventId;
		}
	}

	public void setFacebookEventId(String facebookEventId) {
		_facebookEventId = facebookEventId;
	}

	public String getCorrespondingGoogleEventId() {
		if (_correspondingGoogleEventId == null) {
			return StringPool.BLANK;
		}
		else {
			return _correspondingGoogleEventId;
		}
	}

	public void setCorrespondingGoogleEventId(String correspondingGoogleEventId) {
		_correspondingGoogleEventId = correspondingGoogleEventId;
	}

	public String getCorrespondingGoogleEventCalendarId() {
		if (_correspondingGoogleEventCalendarId == null) {
			return StringPool.BLANK;
		}
		else {
			return _correspondingGoogleEventCalendarId;
		}
	}

	public void setCorrespondingGoogleEventCalendarId(
		String correspondingGoogleEventCalendarId) {
		_correspondingGoogleEventCalendarId = correspondingGoogleEventCalendarId;
	}

	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public Date getStartingTime() {
		return _startingTime;
	}

	public void setStartingTime(Date startingTime) {
		_startingTime = startingTime;
	}

	public Date getEndingTime() {
		return _endingTime;
	}

	public void setEndingTime(Date endingTime) {
		_endingTime = endingTime;
	}

	public String getLocationAsString() {
		if (_locationAsString == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationAsString;
		}
	}

	public void setLocationAsString(String locationAsString) {
		_locationAsString = locationAsString;
	}

	public double getLocationLatitude() {
		return _locationLatitude;
	}

	public void setLocationLatitude(double locationLatitude) {
		_locationLatitude = locationLatitude;
	}

	public double getLocationLongitude() {
		return _locationLongitude;
	}

	public void setLocationLongitude(double locationLongitude) {
		_locationLongitude = locationLongitude;
	}

	public long getRegisteredCount() {
		return _registeredCount;
	}

	public void setRegisteredCount(long registeredCount) {
		_registeredCount = registeredCount;
	}

	public long getCreatorId() {
		return _creatorId;
	}

	public void setCreatorId(long creatorId) {
		_creatorId = creatorId;
	}

	public long getCategoryId() {
		return _categoryId;
	}

	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	public boolean getIsOfficial() {
		return _isOfficial;
	}

	public boolean isIsOfficial() {
		return _isOfficial;
	}

	public void setIsOfficial(boolean isOfficial) {
		_isOfficial = isOfficial;
	}

	public Event toEscapedModel() {
		if (isEscapedModel()) {
			return (Event)this;
		}
		else {
			return (Event)Proxy.newProxyInstance(Event.class.getClassLoader(),
				new Class[] { Event.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Event.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		EventImpl clone = new EventImpl();

		clone.setEventId(getEventId());
		clone.setFacebookEventId(getFacebookEventId());
		clone.setCorrespondingGoogleEventId(getCorrespondingGoogleEventId());
		clone.setCorrespondingGoogleEventCalendarId(getCorrespondingGoogleEventCalendarId());
		clone.setTitle(getTitle());
		clone.setDescription(getDescription());
		clone.setStartingTime(getStartingTime());
		clone.setEndingTime(getEndingTime());
		clone.setLocationAsString(getLocationAsString());
		clone.setLocationLatitude(getLocationLatitude());
		clone.setLocationLongitude(getLocationLongitude());
		clone.setRegisteredCount(getRegisteredCount());
		clone.setCreatorId(getCreatorId());
		clone.setCategoryId(getCategoryId());
		clone.setIsOfficial(getIsOfficial());

		return clone;
	}

	public int compareTo(Event event) {
		int value = 0;

		value = DateUtil.compareTo(getStartingTime(), event.getStartingTime());

		if (value != 0) {
			return value;
		}

		value = getTitle().compareTo(event.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Event event = null;

		try {
			event = (Event)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = event.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{eventId=");
		sb.append(getEventId());
		sb.append(", facebookEventId=");
		sb.append(getFacebookEventId());
		sb.append(", correspondingGoogleEventId=");
		sb.append(getCorrespondingGoogleEventId());
		sb.append(", correspondingGoogleEventCalendarId=");
		sb.append(getCorrespondingGoogleEventCalendarId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", startingTime=");
		sb.append(getStartingTime());
		sb.append(", endingTime=");
		sb.append(getEndingTime());
		sb.append(", locationAsString=");
		sb.append(getLocationAsString());
		sb.append(", locationLatitude=");
		sb.append(getLocationLatitude());
		sb.append(", locationLongitude=");
		sb.append(getLocationLongitude());
		sb.append(", registeredCount=");
		sb.append(getRegisteredCount());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", isOfficial=");
		sb.append(getIsOfficial());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("de.tum.in.ziller.thesis.social_campaign.model.Event");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facebookEventId</column-name><column-value><![CDATA[");
		sb.append(getFacebookEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>correspondingGoogleEventId</column-name><column-value><![CDATA[");
		sb.append(getCorrespondingGoogleEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>correspondingGoogleEventCalendarId</column-name><column-value><![CDATA[");
		sb.append(getCorrespondingGoogleEventCalendarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startingTime</column-name><column-value><![CDATA[");
		sb.append(getStartingTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endingTime</column-name><column-value><![CDATA[");
		sb.append(getEndingTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationAsString</column-name><column-value><![CDATA[");
		sb.append(getLocationAsString());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationLatitude</column-name><column-value><![CDATA[");
		sb.append(getLocationLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationLongitude</column-name><column-value><![CDATA[");
		sb.append(getLocationLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredCount</column-name><column-value><![CDATA[");
		sb.append(getRegisteredCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isOfficial</column-name><column-value><![CDATA[");
		sb.append(getIsOfficial());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private String _facebookEventId;
	private String _correspondingGoogleEventId;
	private String _correspondingGoogleEventCalendarId;
	private String _title;
	private String _description;
	private Date _startingTime;
	private Date _endingTime;
	private String _locationAsString;
	private double _locationLatitude;
	private double _locationLongitude;
	private long _registeredCount;
	private long _creatorId;
	private long _categoryId;
	private boolean _isOfficial;
	private transient ExpandoBridge _expandoBridge;
}